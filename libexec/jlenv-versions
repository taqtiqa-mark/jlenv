#!/usr/bin/env bash

print_version() {
  if [ "$1" == "$current_version" ]; then
    echo "${hit_prefix}$(com_version 2>/dev/null)"
  else
    echo "${miss_prefix}$1"
  fi
  num_versions=$((num_versions + 1))
}

jlenv_versions()
# Summary: List all Julia versions available to jlenv
#
# Usage: jlenv [<opts>] versions [--bare] [--skip-aliases]
#
# Lists all Julia versions known to jlenv, that is, found in 
# `${JLENV_ROOT}/versions/*`.
# Shows an asterisk next to the currently active version.
#
# Options:
#   --bare           Display only the version numbers
#   --skip-aliases:  Do not list versions that have been symlinked.
{
unset bare
unset skip_aliases

# Provide jlenv completions
for arg; do
  case "$arg" in
  --complete )
    echo --bare
    echo --skip-aliases
    exit ;;
  --bare ) bare=1 ;;
  --skip-aliases ) skip_aliases=1 ;;
  * )
    echo 'deprecated: jlenv-help --usage versions >&2'
    exit 1
    ;;
  esac
done

versions_dir="${JLENV_ROOT}/versions"

if [ -d "$versions_dir" ]; then
  versions_dir="$(resolve_path "$versions_dir")"
fi

if [ -n "$bare" ]; then
  hit_prefix=""
  miss_prefix=""
  current_version=""
  include_system=""
else
  hit_prefix="* "
  miss_prefix="  "
  current_version="$(com_version-name || true)"
  include_system="1"
fi

num_versions=0

# Include "system" in the non-bare output, if it exists
if [ -n "$include_system" ] && JLENV_VERSION=system jlenv-which julia >/dev/null 2>&1; then
  print_version system
fi

shopt -s nullglob
for path in "$versions_dir"/*; do
  if [ -d "$path" ]; then
    if [ -n "$skip_aliases" ] && [ -L "$path" ]; then
      target="$(resolve_path "$path")"
      [ "${target%/*}" != "$versions_dir" ] || continue
    fi
    print_version "${path##*/}"
  fi
done
shopt -u nullglob

if [ "$num_versions" -eq 0 ] && [ -n "$include_system" ]; then
  echo "Warning: no Julia detected on the system" >&2
  exit 1
fi
}