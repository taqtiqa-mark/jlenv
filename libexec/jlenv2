#!/usr/bin/env bash

#######################################################################
# gsu-based jlenv - a PoC generic way to write a hello world program
# -----------------------------------------------------------------
# It not only requires one to download and install some totally weird
# git repo, it also takes about 50 lines of specially written code
# to perform what a simple echo 'hello world' would do equally well.
#######################################################################

# TODO force use of functions.
#https://unix.stackexchange.com/questions/188327/how-do-i-explicitly-and-safely-force-the-use-of-a-built-in-command-in-bash
#https://unix.stackexchange.com/questions/543792/how-to-protect-bash-function-from-being-overridden

# TODO Completions
# https://spin.atomicobject.com/2016/02/14/bash-programmable-completion/

src_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${src_dir}/jlenv-shared

gsu_dir="$(resolve_path "${gsu_dir:-${BASH_SOURCE[0]%/*}}")"

gsu_errors="
    E_NO             No Julia install found.
    E_NO_VRSN        No Julia install found of that version.
    E_NO_SYS         No Julia install system wide found.
    E_NO_SYS_VRSN    No Julia install system wide found of that version.
    E_NO_USR         No Julia install user wide found.
    E_NO_USR_VRSN    No Julia install user wide found of that version.
    E_NO_PRJ         No Julia install project wide found.
    E_NO_PRJ_VRSN    No Julia install project wide found of that version.
    E_NO_VRSN_FL     No Julia version file (.julia-version) found.
    E_NO_VRSN_NMBR   No Julia version read from .julia-version.
    E_HLP            Incorrect usage. Please see the error message.
"

# man page banner text
gsu_banner_txt='Robust Julia version management.'
# Text shown at the bottom left of the man page
# Usually the name and version number of the software package
gsu_package="jlenv (TODO jlenv---version here)"

source "${gsu_dir}/jlenv-global" 
source "${gsu_dir}/jlenv-hooks" 
source "${gsu_dir}/jlenv-local"
source "${gsu_dir}/jlenv-prefix"
source "${gsu_dir}/jlenv-version"
source "${gsu_dir}/jlenv-version-file"
source "${gsu_dir}/jlenv-version-file-read"
source "${gsu_dir}/jlenv-version-file-write"
source "${gsu_dir}/jlenv-version-name"
source "${gsu_dir}/jlenv-version-origin"
source "${gsu_dir}/jlenv-versions"
source "${gsu_dir}/jlenv-whence"
source "${gsu_dir}/jlenv-which"

com_global()
{
    jlenv_global "$@"
    ret=$GSU_SUCCESS
}
com_hooks()
{
    jlenv_hooks "$@"
    ret=$GSU_SUCCESS
}
com_local()
{
    jlenv_local "$@"
    ret=$ret
    result=$result
    return $ret
}
com_prefix()
{
    jlenv_prefix "$@"
    ret=$GSU_SUCCESS
}
com_version()
{
    jlenv_version "$@"
    ret=$GSU_SUCCESS
}
com_version-file()
{
    jlenv_version_file "$@"
    ret=$ret
    result=$result
    return $ret
}
com_version-file-read() 
{
    # only 1 argument allowed
    gsu_check_arg_count $# 1 1
    if [ $ret -lt 0 ]
    then 
      failed=$ret
      gsu_msg "version-file-read" 
      ret=$failed
      return $ret
    fi
    jlenv_version_file_read "$@"
    ret=$ret
    result=$result
    return $ret   
}
com_version-file-write()
{
    jlenv_version_file_write "$@"
    ret=$ret
    result=$result
    return $ret
}
com_version-name()
{
    jlenv_version_name "$@"
    ret=$ret
    result=$result
    return
}
com_version-origin()
{
    jlenv_version_origin "$@"
    ret=$GSU_SUCCESS
}
com_versions()
{
    jlenv_versions "$@"
    ret=$GSU_SUCCESS
}
com_whence()
{
    jlenv_whence "$@"
    ret=$GSU_SUCCESS
}
com_which()
{
    jlenv_which "$@"
    ret=$GSU_SUCCESS
}
#####################################################################
#
#  Start-up
#
#####################################################################
source "${gsu_dir}/subcommand" || exit 1

gsu "$@"

# See:
# http://people.tuebingen.mpg.de/maan/gsu/
