#!/usr/bin/env bash

jlenv_diagnostic()
# Usage: jlenv doctor
# Summary: Detects common problems in jlenv installation
{

warnings=0

if [ $(uname -s) = "Darwin" ]; then
  bashrc=".bash_profile"
else
  bashrc=".bashrc"
fi

echo -n "Checking for $(jlenv) in PATH: "
num_locations="$(command which -a jlenv2 | uniq | wc -l)"
if [ $num_locations -eq 0 ]; then
  echo "not found\n"
    if [ -x ~/.jlenv/bin/jlenv2 ]; then
      echo "You seem to have jlenv installed in '${HOME}/.jlenv/bin', but that"
      echo "directory is not present in PATH. Please add it to PATH by configuring"
      echo "your '~/${bashrc}', '~/.zshrc', or '~/.config/fish/config.fish'."
    else
      echo "Please refer to https://jlenv.github.io/jlenv/#installation"
    fi
  exit 1
elif [ $num_locations -eq 1 ]; then
  printf "%s\n" "$(command which jlenv2)"
else
  printf "multiple\n"
    echo "You seem to have multiple jlenv installed at the following locations."
    echo "Please pick one installation and remove the others."
    echo
    command which -a jlenv2
    echo
  : $((warnings++))
fi

JLENV_ROOT="${JLENV_ROOT:-$(jlenv2 root)}"

OLDIFS="$IFS"
IFS=: path=($PATH)
IFS="$OLDIFS"

echo -n "Checking for jlenv shims in PATH: "
shims_dir="${JLENV_ROOT}/shims"
found=""

for dir in "${path[@]}"; do [ "$dir" != "$shims_dir" ] || found=true; done

if [ -n "$found" ]
then
  printf "OK\n"
else
  printf "not found\n"
    echo "The directory '$(shims_dir)' must be present in PATH for jlenv to work."
    echo "Please run \$(jlenv2 init) and follow the instructions." 
  echo
  : $((warnings++))
fi

echo -n "Checking \$(jlenv install) support: "
jlenv_installs="$({ ls "$JLENV_ROOT"/plugins/*/bin/jlenv-install 2>/dev/null || true
                    command which -a jlenv2 install 2>/dev/null || true
                  } | uniq)"
num_installs="$(wc -l <<<"$jlenv_installs")"
if [ -z "$jlenv_installs" ]; then
  printf "not found\n"
    echo "Unless you plan to add Julia versions manually, you should install julia-build."
    echo "Please refer to https://github.com/jlenv/julia-build#installation"
  echo
  : $((warnings++))
elif [ $num_installs -eq 1 ]; then
  printf "$jlenv_installs"
  if [[ $jlenv_installs == "$JLENV_ROOT"/plugins/* ]]; then
    jlenv_install_cmd="${jlenv_installs##*/}"
    jlenv_install_version="$(jlenv2 "${jlenv_install_cmd#jlenv-}" --version || true)"
  else
    jlenv_install_version="$("$jlenv_installs" --version || true)"
  fi
  printf " (%s)\n" "$jlenv_install_version"
else
  printf "multiple\n"
    echo "You seem to have multiple \$(jlenv) installed at the following locations."
    echo "Please pick one installation and remove the others."
    echo
    echo "$jlenv_installs"
  echo
  : $((warnings++))
fi

echo -n "Counting installed Julia versions: "
num_julies="$(jlenv2 versions --bare | wc -l)"
if [ $num_julies -eq 0 ]; then
  printf "none\n"
  echo "There aren't any Julia versions installed under '${JLENV_ROOT}/versions'."
  [ $num_installs -eq 0 ] || {
    echo -n "You install Julia versions as follows: "
    printf "jlenv install 1.0.3\n"
  }
else
  printf "%d versions\n" $num_julies
fi

echo -n "Auditing installed plugins: "
OLDIFS="$IFS"
IFS=$'\n'
hooks=($(jlenv2 hooks exec))
IFS="$OLDIFS"
plugin_broken=0
for hook in "${hooks[@]}"; do
  plugin_name=
  message=
  case "$hook" in
  */"example.bash" )
    plugin_name=jlenv-example
    message="is considered harmful. Please remove the plugin and \$(rm -rf \$(jlenv root)/shims && jlenv rehash)."
    ;;
  esac

  if [ -n "$plugin_name" ]; then
    [ "$((plugin_broken++))" -gt 0 ] || printf "warning\n"
      printf "$plugin_name"
      echo " $message"
      echo "  (found in \`${hook}')"
    
    : $((warnings++))
  fi
done
[ "$plugin_broken" -gt 0 ] || printf "OK\n"

[ $warnings -eq 0 ]
  
}
