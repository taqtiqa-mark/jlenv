#!/usr/bin/env bash
#
# Summary: Set environment variables then invoke jlenv commands.
#
# Usage: jlenv [options] <command> [<command-options>]
#
# Sets the environemnt variables then invokes the given command and its options.

# Import functions shared between jlenv scripts and plugins.
# Function specific to each jlenv-<command> script are:
# - script_usage
# - main "$@" which calls
#    1. script_init "$@"
#    2. script_defaults
#    3. parse_cmds "$@"
# - `jlevn_<command>` holds functional logic and is called by `parse_cmds`
source jlenv-shared

#####################################################################
###  jlenv
#####################################################################
# The master script through which sub-scripts are invoked.

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# DESC: jlenv main script.
#       Parse jlenv common options and call commands passing
#       options and arguments submitted for that command.
# ARGS: $@ (optional): Arguments remaining to be parsed
# OUTS: None.
jlenv() {
  local cmd
  local arg
  cmd="${1-}"
    # Now process jlenv commands and their options.
  command_path="$(command -v "jlenv-${cmd}" || true)"
  [ -n "$command_path" ] || script_exit "No such command: \$(${cmd})" 2

  if [[ $# -gt 0 ]]; 
  then 
    # lookahead 1 to see if the user called help
    shift 1
  fi
  # Now check to see if the user called help about cmd
  if [ "${1-}" = --help ]; then
    if [[ "$cmd" == "sh-"* ]]; then
      echo "jlenv help \"$cmd\""
    else
      exec jlenv-help "$cmd"
    fi
  else
    exec "$command_path" "$@"
  fi
}

# DESC: Script jlenv initialisation
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: $orig_cwd: The current working directory when the script was run
#       $jlenv_cmd_path: The full path to the script
#       $jlenv_cmd_dir: The directory path of the script
#       $jlenv_cmd_name: The file name of the script
#       $jlenv_cmd_args: The original cmdeters provided to the script
#       $ta_none: The ANSI control code to reset all text attributes
# NOTE: $jlenv_cmd_path only contains the path that was used to call the script
#       and will not resolve any symlinks which may be present in the path.
#       You can use a tool like realpath to obtain the "true" path. The same
#       caveat applies to both the $jlenv_cmd_dir and $jlenv_cmd_name variables.
function script_init() {
    # Useful paths
    readonly jlenv_cmd_orig_cwd="$(pwd -P)"
    readonly jlenv_cmd_path="$(resolve_path "${BASH_SOURCE[0]}")"
    readonly jlenv_cmd_dir="$(dirname "$jlenv_cmd_path")"
    readonly jlenv_cmd_name="$(basename "$jlenv_cmd_path")"
    readonly jlenv_cmd_args="$*"

    # Important to always set as we use it in the exit handler
    #readonly ta_none="$(tput sgr0 2> /dev/null || true)"
}

# DESC: Full jlenv usage help.
# ARGS: None
# OUTS: Help text.
function script_usage() {
    command jlenv---version
    cat << EOF
Options to jlenv:
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colo(u)r           Disables colour output
    -cr|--cron                  Run silently unless we encounter an error

EOF
    command jlenv-help
}


# DESC: cmdeter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line cmdeters and options
function parse_cmds() {
    local cmd
    if [[ $# -eq 0 ]]
    then
      script_usage
      exit 1
    fi
    while [[ $# -gt 0 ]]; do
        cmd="${1}"
        shift
        case ${cmd} in
            -h|--help)
                script_usage
                exit 0
                ;;
            -v|--verbose)
                verbose_setup
                ;;
            -nc|--no-colour|--no-color)
                no_colour=true
                ;;
            -cr|--cron)
                cron=true
                ;;
            *)
                jlenv "${cmd}" "$@"
                ;;
        esac
    done
}

# DESC: Set environment default values.
#       Variables should not be referenced using ${variable:-default}.
#       Variables should not be tested using:
#         1. [ -n "${variable}" ]
#         2. [ -z "${variable}"]
#       Instead test for explicit values: 
#         [[ "${variable}" = "value" ]]
# ARGS: None.
# OUTS: None.
#
function script_defaults() {
  return
}

# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    trap script_trap_err ERR
    trap script_trap_exit EXIT

    script_init "$@"
    script_defaults
    parse_cmds "$@"
}

#####################################################################
###  Execute
#####################################################################

main "$@"
